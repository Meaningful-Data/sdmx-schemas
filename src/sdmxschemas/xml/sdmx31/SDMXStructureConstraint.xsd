<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright SDMX 2025 - http://www.sdmx.org -->
<xs:schema targetNamespace="http://www.sdmx.org/resources/sdmxml/schemas/v3_1/structure" 
			xmlns="http://www.sdmx.org/resources/sdmxml/schemas/v3_1/structure" 
			xmlns:xs="http://www.w3.org/2001/XMLSchema" 
			xmlns:common="http://www.sdmx.org/resources/sdmxml/schemas/v3_1/common"
			xmlns:structure="http://www.sdmx.org/resources/sdmxml/schemas/v3_1/structure" 
			elementFormDefault="qualified">

	<xs:import namespace="http://www.sdmx.org/resources/sdmxml/schemas/v3_1/common" schemaLocation="SDMXCommon.xsd"/>
	<xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="xml.xsd"/>
	
	<xs:include schemaLocation="SDMXStructureBase.xsd"/>

	<xs:annotation>
		<xs:appinfo>SDMX Constraint Structure Module</xs:appinfo>
		<xs:documentation>The constraint structure module defines the structure of data and metadata constraint constructs.</xs:documentation>
	</xs:annotation>

	<xs:complexType name="ConstraintBaseType" abstract="true">
		<xs:annotation>
			<xs:documentation>ConstraintBaseType is an abstract base type that forms the basis of the main abstract ConstraintType. It requires that a name be provided.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="common:MaintainableType">
				<xs:sequence>
					<xs:element ref="common:Annotations" minOccurs="0"/>
					<xs:element ref="common:Link" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="common:Name" maxOccurs="unbounded"/>
					<xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="ConstraintType" abstract="true">
		<xs:annotation>
			<xs:documentation>ConstraintType is an abstract base type that specific types of constraints (data and metadata) restrict and extend to describe their details.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ConstraintBaseType">
				<xs:sequence>
					<xs:element name="ConstraintAttachment" type="ConstraintAttachmentType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>ConstraintAttachment describes the collection of constrainable artefacts that the constraint is attached to.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="DataConstraintBaseType" abstract="true">
		<xs:annotation>
			<xs:documentation>DataConstraintBaseType is an abstract base refinement of ConstraintType to define allowed data content. The constraint attachment is restricted to constrainable artefacts related to data.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="ConstraintType">
				<xs:sequence>
					<xs:element ref="common:Annotations" minOccurs="0"/>
					<xs:element ref="common:Link" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="common:Name" maxOccurs="unbounded"/>
					<xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="ConstraintAttachment" type="DataConstraintAttachmentType" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="urn" type="common:DataConstraintUrnType" use="optional"/>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="DataConstraintType">
		<xs:annotation>
			<xs:documentation>DataConstraintType defines the structure of a data constraint. A data constraint contains the allowed values for the referencing artefact. These values are expressed either as sets of keys (DataKeySets) or sets of component values (CubeRegion) constructed from a data structure definition. Data constraints can be used, e.g., for validation or for defining a partial code list.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DataConstraintBaseType">
				<xs:sequence>
					<xs:element name="DataKeySet" type="DataKeySetType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>DataKeySet defines a full, distinct set of dimension values and the attribute values associated with the key.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="CubeRegion" type="CubeRegionType" minOccurs="0" maxOccurs="2">
						<xs:annotation>
							<xs:documentation>CubeRegion defines a slice of the data set (dimensions and attribute values) for the constrained artefact. A set of included or excluded regions can be described.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="MetadataConstraintBaseType" abstract="true">
		<xs:annotation>
			<xs:documentation>MetadataConstraintBaseType is an abstract base refinement of ConstraintType to define allowed metadata content. The constraint attachment is restricted to constrainable artefacts related to metadata.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="ConstraintType">
				<xs:sequence>
					<xs:element ref="common:Annotations" minOccurs="0"/>
					<xs:element ref="common:Link" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="common:Name" maxOccurs="unbounded"/>
					<xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="ConstraintAttachment" type="MetadataConstraintAttachmentType" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="urn" type="common:MetadataConstraintUrnType" use="optional"/>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="MetadataConstraintType">
		<xs:annotation>
			<xs:documentation>MetadataConstraintType defines the structure of a metadata constraint. A metadata constraint can specify allowed attribute values for metadata described by the constrained artefact.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="MetadataConstraintBaseType">
				<xs:sequence>
					<xs:element name="MetadataTargetRegion" type="MetadataTargetRegionType" minOccurs="0" maxOccurs="2">
						<xs:annotation>
							<xs:documentation>MetadataTargetRegion describes the values allowed for metadata attributes.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

<xs:complexType name="DataKeySetType">
		<xs:annotation>
			<xs:documentation>DataKeySetType defines a collection of full or partial data keys (dimension values).</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Key" type="DataKeyType" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Key contains a set of dimension values which identify a full set of data.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="isIncluded" type="xs:boolean" use="required">
			<xs:annotation>
				<xs:documentation>The isIncluded attribute indicates whether the keys defined in this key set are inclusive or exclusive to the constraint.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="ConstraintAttachmentType" abstract="true">
		<xs:annotation>
			<xs:documentation>ConstraintAttachmentType describes a collection of references to constrainable artefacts.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="DataProvider" type="common:DataProviderReferenceType">
				<xs:annotation>
					<xs:documentation>DataProvider is reference to a data provider to which the constraint is attached.  The referenced is provided as a URN and/or a full set of reference fields.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="MetadataProvider" type="common:MetadataProviderReferenceType">
				<xs:annotation>
					<xs:documentation>MetadataProvider is reference to a metadata provider to which the constraint is attached. The referenced is provided as a URN and/or a full set of reference fields.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="DataStructure" type="common:DataStructureReferenceType" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>DataStructure is reference to a data structure definition to which the constraint is attached. The referenced is provided as a URN and/or a full set of reference fields. A constraint which is attached to more than one data structure must only express key sets and/or cube regions where the identifiers of the dimensions are common across all structures to which the constraint is attached.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="MetadataStructure" type="common:MetadataStructureReferenceType" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>MetadataStructure is reference to a metadata structure definition to which the constraint is attached. The referenced is provided as a URN and/or a full set of reference fields. A constraint which is attached to more than one metadata structure must only express key sets and/or target regions where the identifiers of the target objects are common across all structures to which the constraint is attached.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Dataflow" type="common:DataflowReferenceType" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Dataflow is reference to a data flow to which the constraint is attached. The referenced is provided as a URN and/or a full set of reference fields. A constraint can be attached to more than one dataflow, and the dataflows do not necessarily have to be usages of the same data structure. However, a constraint which is attached to more than one data structure must only express key sets and/or cube regions where the identifiers of the dimensions are common across all structures to which the constraint is attached.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Metadataflow" type="common:MetadataflowReferenceType" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Metadataflow is reference to a metadata flow to which the constraint is attached. The referenced is provided as a URN and/or a full set of reference fields. A constraint can be attached to more than one metadataflow, and the metadataflows do not necessarily have to be usages of the same metadata structure. However, a constraint which is attached to more than one metadata structure must only express key sets and/or target regions where the identifiers of the target objects are common across all structures to which the constraint is attached.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="ProvisionAgreement" type="common:ProvisionAgreementReferenceType" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>ProvisionAgreementReference is reference to a provision agreement to which the constraint is attached. The referenced is provided as a URN and/or a full set of reference fields. A constraint can be attached to more than one provision agreement, and the provision agreements do not necessarily have to be references structure usages based on the same structure. However, a constraint which is attached to more than one provision agreement must only express key sets and/or cube/target regions where the identifier of the components are common across all structures to which the constraint is attached.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="MetadataProvisionAgreement" type="common:MetadataProvisionAgreementReferenceType" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>ProvisionAgreementReference is reference to a provision agreement to which the constraint is attached. The referenced is provided as a URN and/or a full set of reference fields. A constraint can be attached to more than one provision agreement, and the provision agreements do not necessarily have to be references structure usages based on the same structure. However, a constraint which is attached to more than one provision agreement must only express key sets and/or cube/target regions where the identifier of the components are common across all structures to which the constraint is attached.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>

	<xs:complexType name="DataConstraintAttachmentType">
		<xs:annotation>
			<xs:documentation>DataConstraintAttachmentType restricts the base ConstraintAttachmentType to only allow artefacts related to data.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="ConstraintAttachmentType">
				<xs:choice>
					<xs:element name="DataProvider" type="common:DataProviderReferenceType"/>
					<xs:element name="DataStructure" type="common:DataStructureReferenceType" maxOccurs="unbounded"/>
					<xs:element name="Dataflow" type="common:DataflowReferenceType" maxOccurs="unbounded"/>
					<xs:element name="ProvisionAgreement" type="common:ProvisionAgreementReferenceType" maxOccurs="unbounded"/>				</xs:choice>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="MetadataConstraintAttachmentType">
		<xs:annotation>
			<xs:documentation>MetadataConstraintAttachmentType restricts the base ConstraintAttachmentType to only allow artefacts related to metadata.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="ConstraintAttachmentType">
				<xs:choice>
					<xs:element name="MetadataProvider" type="common:MetadataProviderReferenceType"/>
					<xs:element name="MetadataStructure" type="common:MetadataStructureReferenceType" maxOccurs="unbounded"/>
					<xs:element name="Metadataflow" type="common:MetadataflowReferenceType" maxOccurs="unbounded"/>
					<xs:element name="MetadataProvisionAgreement" type="common:MetadataProvisionAgreementReferenceType" maxOccurs="unbounded"/>
				</xs:choice>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="AvailabilityConstraintAttachmentType">
		<xs:annotation>
				<xs:documentation>AvailabilityConstraintAttachmentType describes a collection of references to data-related artefacts, for which availability is provided.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="ConstraintAttachmentType">
				<xs:choice>
					<xs:element name="DataStructure" type="common:DataStructureReferenceType" maxOccurs="1"/>
					<xs:element name="Dataflow" type="common:DataflowReferenceType" maxOccurs="1"/>
					<xs:element name="ProvisionAgreement" type="common:ProvisionAgreementReferenceType" maxOccurs="1"/>
				</xs:choice>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="AvailabilityConstraintType">
		<xs:annotation>
			<xs:documentation>AvailabilityConstraintType defines the structure of an availability constraint. This type of constraint contains the actual data currently present for the referenced object and is used to express data availability either by listing the available sets of keys (DataKeySet) or a set of component values (CubeRegion), e.g., in a data source. Availability constraints should not be (semantically) versioned.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="common:AnnotableType">
				<xs:sequence>
					<xs:element name="ConstraintAttachment" type="AvailabilityConstraintAttachmentType" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>ConstraintAttachment describes the Constrainable structure the availability information is for</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="CubeRegion" type="CubeRegionType" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>CubeRegion defines a slice of the data set (dimensions and attribute values) for the constrained artefact. A set of included or excluded regions can be described.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="seriesCount" type="xs:int" use="optional"/>
				<xs:attribute name="obsCount" type="xs:int" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="RegionType" abstract="true">
		<xs:annotation>
			<xs:documentation>RegionType is an abstract type which defines a generic constraint region. This type can be refined to define regions for data or metadata sets. A region is defined by a collection of key values - each of which a collection of values for a component which disambiguates data (i.e. dimensions of a dataset). For each region, a collection of attribute values can be provided. Taken together, the key values and attributes serve to identify or describe a subset of a data or metadata set. Finally, the region can be flagged as being included or excluded, although this flag only makes sense when the region is used in a particular context.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="common:AnnotableType">
				<xs:sequence>
					<xs:element name="KeyValue" type="MemberSelectionType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>KeyValue contains a reference to a component which disambiguates the data (i.e. a dimension) and provides a collection of values for the component. The collection of values can be flagged as being inclusive or exclusive to the region being defined. Any key component that is not included is assumed to be wild carded, which is to say that the cube includes all possible values for the un-referenced key components. Further, this assumption applies to the values of the components as well. The values for any given component can only be sub-setted in the region by explicit inclusion or exclusion. For example, a dimension X which has the possible values of 1, 2, 3 is assumed to have all of these values if a key value is not defined. If a key value is defined with an inclusion attribute of true and the values of 1 and 2, the only the values of 1 and 2 for dimension X are included in the definition of the region. If the key value is defined with an inclusion attribute of false and the value of 1, then the values of 2 and 3 for dimension X are included in the definition of the region. Note that any given key component must only be referenced once in the region.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Component" type="MemberSelectionType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>Component contains a reference to a component (data attribute, metadata attribute, or measure) and provides a collection of values for the referenced component. This serves to state that for the key which defines the region, the components that are specified here have or do not have (depending on the include attribute of the value set) the values provided. It is possible to provide a component reference without specifying values, for the purpose of stating the component is absent (include = false) or present with an unbounded set of values. As opposed to key components, which are assumed to be wild carded if absent, no assumptions are made about the absence of a component. Only components which are explicitly stated to be present or absent from the region will be know. All unstated components for the set cannot be assumed to absent or present.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="include" type="xs:boolean" use="optional" default="true">
					<xs:annotation>
						<xs:documentation>The include attribute indicates that the region is to be included or excluded within the context in which it is defined. For example, if the regions is defined as part of a content constraint, the exclude flag would mean the data identified by the region is not present.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="validFrom" type="common:StandardTimePeriodType" use="optional"/>
				<xs:attribute name="validTo" type="common:StandardTimePeriodType" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="MemberSelectionType" abstract="true">
		<xs:annotation>
			<xs:documentation>MemberSelectionType is an abstract base type which is used to provide a set of values for a referenced component. Implementations of this type will be based on a particular component type and refine the allowed values to reflect the types of values that are possible for that type of component.</xs:documentation>
		</xs:annotation>
		<xs:choice minOccurs="0">
			<xs:element name="Value" type="SimpleComponentValueType" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Value provides a simple value for the component, such as a coded, numeric, or simple text value. This type of component value is applicable for dimensions and attributes.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="TimeRange" type="TimeRangeValueType">
				<xs:annotation>
					<xs:documentation>TimeValue provides a value for a component which has a time representation. This is repeatable to allow for a range to be specified, although a single value can also be provided. An operator is available on this to indicate whether the specified value indicates an exact value or the beginning/end of a range (inclusive or exclusive).</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
		<xs:attribute name="id" type="common:NestedNCNameIDType" use="required">
			<xs:annotation>
				<xs:documentation>The id attribute provides the identifier for the component for which values are being provided. This base type allows for a nested identifier to be provided, for the purpose of referencing a nested component (i.e. a metadata attribute). However, specific implementations will restrict this representation to only allow single level identifiers where appropriate.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="include" type="xs:boolean" use="optional" default="true">
			<xs:annotation>
				<xs:documentation>The include attribute indicates whether the values provided for the referenced component are to be included or excluded from the region in which they are defined.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="removePrefix" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>The removePrefix attribute indicates whether codes should keep or not the prefix, as defined in the extension of codelist.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="validFrom" type="common:StandardTimePeriodType" use="optional"/>
		<xs:attribute name="validTo" type="common:StandardTimePeriodType" use="optional"/>
	</xs:complexType>

	<xs:complexType name="DataKeyType">
		<xs:annotation>
			<xs:documentation>DataKeyType is a region which defines a distinct full or partial data key. The key consists of a set of values, each referencing a dimension and providing a single value for that dimension. The purpose of the key is to define a subset of a data set (i.e. the observed value and data attribute) which have the dimension values provided in this definition. Any dimension not stated explicitly in this key is assumed to be wild carded, thus allowing for the definition of partial data keys.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="RegionType">
				<xs:sequence>
					<xs:element ref="common:Annotations" minOccurs="0"/>
					<xs:element name="KeyValue" type="DataKeyValueType" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="Component" type="DataComponentValueSetType" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="include" type="xs:boolean" use="optional" fixed="true">
					<xs:annotation>
						<xs:documentation>The include attribute has a fixed value of true for a distinct key, since such a key is always assumed to identify existing data or metadata.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="DataKeyValueType">
		<xs:annotation>
			<xs:documentation>DataKeyValueType is a type for providing one or more dimension values for the purpose of defining a distinct data key.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="MemberSelectionType">
				<xs:sequence>
					<xs:annotation>
						<xs:documentation>v3.1  allows for unbounded Values to support use case with keys that define multiple values for a Dimension i.e. FREQ=A or M or Q  and REF_AREA=DE and CURR=EUR</xs:documentation>
					</xs:annotation>
					<xs:element name="Value" type="SimpleKeyValueType" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="id" type="common:SingleNCNameIDType" use="required"/>
				<xs:attribute name="include" type="xs:boolean" use="optional" fixed="true"/>
				<xs:attribute name="validFrom" type="common:StandardTimePeriodType" use="prohibited"/>
				<xs:attribute name="validTo" type="common:StandardTimePeriodType" use="prohibited"/>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="DataComponentValueSetType">
		<xs:annotation>
			<xs:documentation>DataComponentValueSetType defines the structure for providing values for a data attributes, measures, or metadata attributes. If no values are provided, the component is implied to include/excluded from the region in which it is defined, with no regard to the value of the component. Note that for metadata attributes which occur within other metadata attributes, a nested identifier can be provided. For example, a value of CONTACT.ADDRESS.STREET refers to the metadata attribute with the identifier STREET which exists in the ADDRESS metadata attribute in the CONTACT metadata attribute, which is defined at the root of the report structure.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="MemberSelectionType">
				<xs:choice minOccurs="0">
					<xs:element name="Value" type="DataComponentValueType" maxOccurs="unbounded"/>
					<xs:element name="TimeRange" type="TimeRangeValueType"/>
				</xs:choice>
				<xs:attribute name="id" type="common:NestedNCNameIDType" use="required"/>
				<xs:attribute name="validFrom" type="common:StandardTimePeriodType" use="prohibited"/>
				<xs:attribute name="validTo" type="common:StandardTimePeriodType" use="prohibited"/>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="CubeRegionType">
		<xs:annotation>
			<xs:documentation>CubeRegionType defines the structure of a data cube region. This is based on the abstract RegionType and simply refines the key and attribute values to conform with what is applicable for dimensions and attributes, respectively. See the documentation of the base type for more details on how a region is defined.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="RegionType">
				<xs:sequence>
					<xs:element ref="common:Annotations" minOccurs="0"/>
					<xs:element name="KeyValue" type="CubeRegionKeyType" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="Component" type="ComponentValueSetType" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="validFrom" type="common:StandardTimePeriodType" use="prohibited"/>
				<xs:attribute name="validTo" type="common:StandardTimePeriodType" use="prohibited"/>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="MetadataTargetRegionType">
		<xs:annotation>
			<xs:documentation>MetadataTargetRegionType defines the structure of a metadata target region. A metadata target region must define the report structure and the metadata target from that structure on which the region is based. This type is based on the abstract RegionType and simply refines the key and attribute values to conform with what is applicable for target objects and metadata attributes, respectively. See the documentation of the base type for more details on how a region is defined.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="RegionType">
				<xs:sequence>
					<xs:element name="Component" type="MetadataAttributeValueSetType" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="CubeRegionKeyType">
		<xs:annotation>
			<xs:documentation>CubeRegionKeyType is a type for providing a set of values for a dimension for the purpose of defining a data cube region. A set of distinct value can be provided, or if this dimension is represented as time, and time range can be specified.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="MemberSelectionType">
				<xs:choice>
					<xs:element name="Value" type="CubeKeyValueType" maxOccurs="unbounded"/>
					<xs:element name="TimeRange" type="TimeRangeValueType"/>
				</xs:choice>
				<xs:attribute name="id" type="common:SingleNCNameIDType" use="required"/>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="ComponentValueSetType">
		<xs:annotation>
			<xs:documentation>ComponentValueSetType defines the structure for providing values for a data attributes, measures, or metadata attributes. If no values are provided, the component is implied to include/excluded from the region in which it is defined, with no regard to the value of the component. Note that for metadata attributes which occur within other metadata attributes, a nested identifier can be provided. For example, a value of CONTACT.ADDRESS.STREET refers to the metadata attribute with the identifier STREET which exists in the ADDRESS metadata attribute in the CONTACT metadata attribute, which is defined at the root of the report structure.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="MemberSelectionType">
				<xs:choice minOccurs="0">
					<xs:element name="Value" type="SimpleComponentValueType" maxOccurs="unbounded"/>
					<xs:element name="TimeRange" type="TimeRangeValueType"/>
				</xs:choice>
				<xs:attribute name="id" type="common:NestedNCNameIDType" use="required"/>
				<xs:attribute name="validFrom" type="common:StandardTimePeriodType" use="prohibited"/>
				<xs:attribute name="validTo" type="common:StandardTimePeriodType" use="prohibited"/>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="MetadataAttributeValueSetType">
		<xs:annotation>
			<xs:documentation>MetadataAttributeValueSetType defines the structure for providing values for a metadata attribute. If no values are provided, the attribute is implied to include/excluded from the region in which it is defined, with no regard to the value of the metadata attribute.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="MemberSelectionType">
				<xs:choice minOccurs="0">
					<xs:element name="Value" type="SimpleComponentValueType" maxOccurs="unbounded"/>
					<xs:element name="TimeRange" type="TimeRangeValueType"/>
				</xs:choice>
				<xs:attribute name="validFrom" type="common:StandardTimePeriodType" use="prohibited"/>
				<xs:attribute name="validTo" type="common:StandardTimePeriodType" use="prohibited"/>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="SimpleComponentValueType">
		<xs:annotation>
			<xs:documentation>SimpleValueType contains a simple value for a component, and if that value is from a code list, the ability to indicate that child codes in a simple hierarchy are part of the value set of the component for the region.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="cascadeValues" type="common:CascadeSelectionType" use="optional" default="false">
					<xs:annotation>
						<xs:documentation>The cascadeValues attribute, if true, indicates that if the value is taken from a code all child codes in a simple hierarchy are understood be included in the region.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute ref="xml:lang" use="optional">
					<xs:annotation>
						<xs:documentation>The xml:lang attribute specifies a language code for the value. This is used when the component value support multi-lingual values.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="validFrom" type="common:StandardTimePeriodType" use="optional"/>
				<xs:attribute name="validTo" type="common:StandardTimePeriodType" use="optional"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>

	<xs:complexType name="CubeKeyValueType">
		<xs:annotation>
			<xs:documentation>CubeKeyValueType derives from the SimpleValueType, but does not allow for a locale (xml:lang).</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:restriction base="SimpleComponentValueType">
				<xs:attribute ref="xml:lang" use="prohibited"/>
			</xs:restriction>
		</xs:simpleContent>
	</xs:complexType>

	<xs:complexType name="DataComponentValueType">
		<xs:annotation>
			<xs:documentation>DataComponentValueType derives from the SimpleValueType, but does not allow for validity dates.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:restriction base="SimpleComponentValueType">
				<xs:attribute name="validFrom" type="common:StandardTimePeriodType" use="prohibited"/>
				<xs:attribute name="validTo" type="common:StandardTimePeriodType" use="prohibited"/>
			</xs:restriction>
		</xs:simpleContent>
	</xs:complexType>

	<xs:complexType name="SimpleKeyValueType">
		<xs:annotation>
			<xs:documentation>SimpleKeyValueType derives from the SimpleValueType, but does not allow for the cascading of value in the hierarchy, as keys are meant to describe a distinct full or partial key.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:restriction base="SimpleComponentValueType">
				<xs:attribute name="cascadeValues" type="common:CascadeSelectionType" use="prohibited"/>
				<xs:attribute ref="xml:lang" use="prohibited"/>
				<xs:attribute name="validFrom" type="common:StandardTimePeriodType" use="prohibited"/>
				<xs:attribute name="validTo" type="common:StandardTimePeriodType" use="prohibited"/>
			</xs:restriction>
		</xs:simpleContent>
	</xs:complexType>

	<xs:complexType name="TimeRangeValueType">
		<xs:annotation>
			<xs:documentation>TimeRangeValueType allows a time period value to be expressed as a range. It can be expressed as the period before a period, after a period, or between two periods. Each of these properties can specify their inclusion in regards to the range.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="BeforePeriod" type="TimePeriodRangeType">
				<xs:annotation>
					<xs:documentation>BeforePeriod is the period before which the period is meant to cover. This date may be inclusive or exclusive in the range.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="AfterPeriod" type="TimePeriodRangeType">
				<xs:annotation>
					<xs:documentation>AfterPeriod is the period after which the period is meant to cover. This date may be inclusive or exclusive in the range.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:sequence>
				<xs:element name="StartPeriod" type="TimePeriodRangeType">
					<xs:annotation>
						<xs:documentation>StartPeriod is the start date or the range that the queried date must occur within. This date may be inclusive or exclusive in the range.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="EndPeriod" type="TimePeriodRangeType">
					<xs:annotation>
						<xs:documentation>EndPeriod is the end period of the range. This date may be inclusive or exclusive in the range.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:choice>
		<xs:attribute name="validFrom" type="common:StandardTimePeriodType" use="optional"/>
		<xs:attribute name="validTo" type="common:StandardTimePeriodType" use="optional"/>
	</xs:complexType>

	<xs:complexType name="TimePeriodRangeType">
		<xs:annotation>
			<xs:documentation>TimePeriodRangeType defines a time period, and indicates whether it is inclusive in a range.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:extension base="common:ObservationalTimePeriodType">
				<xs:attribute name="isInclusive" type="xs:boolean" default="true">
					<xs:annotation>
						<xs:documentation>The isInclusive attribute, when true, indicates that the time period specified is included in the range.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>

	<xs:simpleType name="SimpleOperatorType">
		<xs:annotation>
			<xs:documentation>SimpleOperatorType provides an enumeration of simple operators to be applied to any value.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="notEqual">
				<xs:annotation>
					<xs:documentation>(!=) - value must not be equal to the value supplied.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="equal">
				<xs:annotation>
					<xs:documentation>(=) - value must be exactly equal to the value supplied.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="RangeOperatorType">
		<xs:annotation>
			<xs:documentation>RangeOperatorType provides an enumeration of range operators to be applied to an ordered value.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="greaterThanOrEqual">
				<xs:annotation>
					<xs:documentation>(>=) - value must be greater than or equal to the value supplied.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="lessThanOrEqual">
				<xs:annotation>
					<xs:documentation>(&lt;=) - value must be less than or equal to the value supplied.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="greaterThan">
				<xs:annotation>
					<xs:documentation>(>) - value must be greater than the value supplied.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="lessThan">
				<xs:annotation>
					<xs:documentation>(&lt;) - value must be less than the value supplied.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="TextSearchOperatorType">
		<xs:annotation>
			<xs:documentation>TextSearchOperatorType provides an enumeration of text search operators.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="contains">
				<xs:annotation>
					<xs:documentation>The text being searched must contain the supplied text.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="startsWith">
				<xs:annotation>
					<xs:documentation>The text being searched must start with the supplied text.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="endsWith">
				<xs:annotation>
					<xs:documentation>The text being searched must end with the supplied text.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="doesNotContain">
				<xs:annotation>
					<xs:documentation>The text being searched cannot contain the supplied text.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="doesNotStartWith">
				<xs:annotation>
					<xs:documentation>The text being searched cannot start with the supplied text.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="doesNotEndWith">
				<xs:annotation>
					<xs:documentation>The text being searched cannot end with the supplied text.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="OrderedOperatorType">
		<xs:annotation>
			<xs:documentation>OrderedOperatorType combines the SimpleOperatorType and the RangeOperatorType to provide a full range or operators for any ordered value.</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="SimpleOperatorType RangeOperatorType"/>
	</xs:simpleType>

	<xs:simpleType name="TextOperatorType">
		<xs:annotation>
			<xs:documentation></xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="SimpleOperatorType TextSearchOperatorType"/>
	</xs:simpleType>

	<xs:simpleType name="TimeOperatorType">
		<xs:annotation>
			<xs:documentation>TimeOperatorType derives from the OrderedOperatorType to remove the notEqual operator.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="OrderedOperatorType">
			<xs:enumeration value="equal"/>
			<xs:enumeration value="greaterThanOrEqual"/>
			<xs:enumeration value="lessThanOrEqual"/>
			<xs:enumeration value="greaterThan"/>
			<xs:enumeration value="lessThan"/>
		</xs:restriction>
	</xs:simpleType>

</xs:schema>
